from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import json
import asyncio
import nest_asyncio
import os
from dotenv import load_dotenv
from database import Database
from server import start_server
from game_repository import GameRepository

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
load_dotenv()

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
start_server()

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è event loop
nest_asyncio.apply()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_scores = {}
user_multipliers = {}  # –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
db = Database.get_instance()

game_repo = GameRepository()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async def save_scores():
    conn = db.get_connection()
    if not conn:
        return
        
    with conn.cursor() as cursor:
        for user_id, score in user_scores.items():
            multiplier = user_multipliers.get(user_id, 1)
            cursor.execute("""
                INSERT INTO scores (user_id, score, multiplier) 
                VALUES (%s, %s, %s)
                ON CONFLICT (user_id) 
                DO UPDATE SET score = %s, multiplier = %s
            """, (user_id, score, multiplier, score, multiplier))
        conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async def load_scores():
    scores = {}
    multipliers = {}
    conn = db.get_connection()
    if not conn:
        return scores, multipliers
    
    with conn.cursor() as cursor:
        cursor.execute("SELECT user_id, score, multiplier FROM scores")
        for user_id, score, multiplier in cursor.fetchall():
            scores[user_id] = score
            multipliers[user_id] = multiplier
    return scores, multipliers

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    
    await update.message.reply_text(
        "üéÆ –ö–ª–∏–∫–µ—Ä",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton(
                "üéÆ –ò–≥—Ä–∞—Ç—å",
                web_app=WebAppInfo(url="https://qqunity.ru")
            )
        ]])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    
    try:
        current_data = game_repo.get_user_score(user_id) or (0, 1)
        score, multiplier = current_data
        
        score += multiplier
        game_repo.save_score(user_id, score, multiplier)
        
        keyboard = [
            [InlineKeyboardButton("–ö–ª–∏–∫! üëÜ", callback_data="click")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {score}\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç!",
            reply_markup=reply_markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        leaders = game_repo.get_leaderboard(10)
        text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"
        for i, (user_id, score, multiplier) in enumerate(leaders, 1):
            text += f"{i}. –ò–≥—Ä–æ–∫ {user_id}: {score} –æ—á–∫–æ–≤ (x{multiplier})\n"
        
        await update.message.reply_text(text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤")

async def get_rank(user_id: str) -> int:
    try:
        leaders = game_repo.get_leaderboard()
        for i, (leader_id, _, _) in enumerate(leaders, 1):
            if leader_id == user_id:
                return i
        return len(leaders) + 1
    except Exception:
        return 0

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = str(update.effective_user.id)
        user_data = game_repo.get_user_score(user_id)
        
        if user_data:
            score, multiplier = user_data
            rank = await get_rank(user_id)
            
            await update.message.reply_text(
                f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"–û—á–∫–∏: {score}\n"
                f"–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{multiplier}\n"
                f"–ú–µ—Å—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤: {rank}\n"
            )
        else:
            await update.message.reply_text(
                "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—á–∫–æ–≤.\n"
                "–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–µ –æ—á–∫–∏!"
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

async def web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = json.loads(update.effective_message.web_app_data.data)
        user_id = str(update.effective_user.id)
        
        game_repo.save_score(
            user_id=user_id,
            score=data['score'],
            multiplier=data.get('multiplier', 1)
        )
        
        await update.message.reply_text(
            f"üéÆ –ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
            f"üìä –í–∞—à —Å—á–µ—Ç: {data['score']}\n"
            f"‚ú® –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{data.get('multiplier', 1)}"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        leaders = game_repo.get_leaderboard(10)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_id = str(update.effective_user.id)
        user_data = game_repo.get_user_score(user_id) or (0, 1)
        user_rank = await get_rank(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π –ª–∏–¥–µ—Ä–æ–≤
        text = "üèÜ –¢–û–ü-10 –ò–ì–†–û–ö–û–í:\n\n"
        
        for i, (leader_id, score, multiplier) in enumerate(leaders, 1):
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–ø-3
            prefix = {1: "üëë", 2: "ü•à", 3: "ü•â"}.get(i, f"{i}.")
            
            # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if leader_id == user_id:
                text += f"{prefix} –í–´: {score:,} –æ—á–∫–æ–≤ (x{multiplier})\n"
            else:
                text += f"{prefix} –ò–≥—Ä–æ–∫: {score:,} –æ—á–∫–æ–≤ (x{multiplier})\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ —Ç–æ–ø-10
        if user_rank > 10:
            text += f"\n–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:\n{user_rank}. –í–´: {user_data[0]:,} –æ—á–∫–æ–≤ (x{user_data[1]})"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_players = len(game_repo.get_leaderboard(limit=None))
        text += f"\n\nüìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {total_players:,}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_top")
        ]])
        
        await update.message.reply_text(text, reply_markup=keyboard)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async def refresh_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        leaders = game_repo.get_leaderboard(10)
        user_id = str(query.from_user.id)
        user_data = game_repo.get_user_score(user_id) or (0, 1)
        user_rank = await get_rank(user_id)
        
        text = "üèÜ –¢–û–ü-10 –ò–ì–†–û–ö–û–í:\n\n"
        for i, (leader_id, score, multiplier) in enumerate(leaders, 1):
            prefix = {1: "üëë", 2: "ü•à", 3: "ü•â"}.get(i, f"{i}.")
            if leader_id == user_id:
                text += f"{prefix} –í–´: {score:,} –æ—á–∫–æ–≤ (x{multiplier})\n"
            else:
                text += f"{prefix} –ò–≥—Ä–æ–∫: {score:,} –æ—á–∫–æ–≤ (x{multiplier})\n"
        
        if user_rank > 10:
            text += f"\n–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:\n{user_rank}. –í–´: {user_data[0]:,} –æ—á–∫–æ–≤ (x{user_data[1]})"
        
        total_players = len(game_repo.get_leaderboard(limit=None))
        text += f"\n\nüìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {total_players:,}"
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_top")
            ]])
        )
        await query.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–ø–∞: {e}")
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

async def main():
    token = os.getenv('BOT_TOKEN')
    if not token:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_click))
    application.add_handler(CommandHandler("leaderboard", leaderboard))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, web_app_data))
    application.add_handler(CommandHandler("top", top))
    application.add_handler(CallbackQueryHandler(refresh_top, pattern="^refresh_top$"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    await application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω") 