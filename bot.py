from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import json
import asyncio
import nest_asyncio
import os
from dotenv import load_dotenv
import psycopg2
from urllib.parse import urlparse

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
load_dotenv()

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è event loop
nest_asyncio.apply()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_scores = {}
user_multipliers = {}  # –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv('DATABASE_URL')
if not DATABASE_URL:
    raise ValueError("DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

url = urlparse(DATABASE_URL)
print(url)
connection = psycopg2.connect(
    database=url.path[1:],
    user=url.username,
    password=url.password,
    host=url.hostname,
    port=url.port
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
with connection.cursor() as cursor:
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS scores (
            user_id TEXT PRIMARY KEY,
            score INTEGER DEFAULT 0
        )
    """)
    connection.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async def save_scores():
    with connection.cursor() as cursor:
        for user_id, score in user_scores.items():
            cursor.execute("""
                INSERT INTO scores (user_id, score) 
                VALUES (%s, %s)
                ON CONFLICT (user_id) 
                DO UPDATE SET score = %s
            """, (user_id, score, score))
        connection.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async def load_scores():
    scores = {}
    with connection.cursor() as cursor:
        cursor.execute("SELECT user_id, score FROM scores")
        for user_id, score in cursor.fetchall():
            scores[user_id] = score
    return scores

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global user_scores
    user_id = str(update.effective_user.id)
    
    if user_id not in user_scores:
        user_scores[user_id] = 0
    
    keyboard = [
        [InlineKeyboardButton("–ö–ª–∏–∫! üëÜ", callback_data="click")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {user_scores[user_id]}\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç!",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    
    multiplier = user_multipliers.get(user_id, 1)
    user_scores[user_id] = user_scores.get(user_id, 0) + (1 * multiplier)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    with connection.cursor() as cursor:
        cursor.execute("""
            INSERT INTO scores (user_id, score) 
            VALUES (%s, %s)
            ON CONFLICT (user_id) 
            DO UPDATE SET score = %s
        """, (user_id, user_scores[user_id], user_scores[user_id]))
        connection.commit()
    
    keyboard = [
        [InlineKeyboardButton("–ö–ª–∏–∫! üëÜ", callback_data="click")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {user_scores[user_id]}\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç!",
        reply_markup=reply_markup
    )

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sorted_scores = sorted(user_scores.items(), key=lambda x: x[1], reverse=True)[:10]
    text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"
    for i, (user_id, score) in enumerate(sorted_scores, 1):
        text += f"{i}. –ò–≥—Ä–æ–∫ {user_id}: {score} –æ—á–∫–æ–≤\n"
    
    await update.message.reply_text(text)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    score = user_scores.get(user_id, 0)
    
    await update.message.reply_text(
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–û—á–∫–∏: {score}\n"
        f"–ú–µ—Å—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤: {get_rank(user_id)}\n"
    )

async def web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = json.loads(update.effective_message.web_app_data.data)
    user_id = str(update.effective_user.id)
    user_scores[user_id] = data['score']
    await save_scores()
    await update.message.reply_text(f"–í–∞—à —Å—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {data['score']}")

async def main():
    global user_scores
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_scores = await load_scores()
    
    token = os.getenv('BOT_TOKEN')
    if not token:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_click))
    application.add_handler(CommandHandler("leaderboard", leaderboard))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, web_app_data))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –¥–µ—Ä–∂–∏–º –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º
    await application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω") 